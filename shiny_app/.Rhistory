install.packages("readxl")
install.packages("readxl")
# Instala la librería readxl si aún no lo has hecho
# install.packages("readxl")
# Carga la librería
library(readxl)
# Lee el archivo Excel (reemplaza "ruta_del_archivo.xlsx" con la ubicación real de tu archivo)
datos <- read_excel("ruta_del_archivo.xlsx")
clc
clean
q()
# Load necessary libraries
library(readxl)         # For reading Excel files
library(lifecontingencies) # For actuarial calculations
# Install and load required packages
if (!requireNamespace("readxl", quietly = TRUE)) {
install.packages("readxl")
}
if (!requireNamespace("lifecontingencies", quietly = TRUE)) {
install.packages("lifecontingencies")
}
library(readxl)          # For reading Excel files
library(lifecontingencies) # For actuarial calculations
# Define file path for the male mortality table
male_file <- "C:/Pension_Project/data/male_ICSLT2023.xlsx"
# Load the mortality table into R
male_data <- read_excel(male_file)
# Display the first few rows of the data to validate structure
print(head(male_data))
# Check the structure of the data to ensure correct column names and types
str(male_data)
# Create an actuarial mortality table
# Assuming the first column is 'Age' and subsequent columns are qx values for each year
male_mortality <- new("actuarialtable",
x = male_data$Age,              # Ages column
lx = rep(1, nrow(male_data)),   # Placeholder for lx (can adjust later)
qx = as.matrix(male_data[, -1]), # Columns excluding 'Age'
name = "Male Mortality Table"
)
# Install and load required packages
if (!requireNamespace("readxl", quietly = TRUE)) {
install.packages("readxl")
}
if (!requireNamespace("lifecontingencies", quietly = TRUE)) {
install.packages("lifecontingencies")
}
library(readxl)          # For reading Excel files
library(lifecontingencies) # For actuarial calculations
# Step 1: Define file paths
male_file <- "C:/Pension_Project/data/male_ICSLT2023.xlsx"
female_file <- "C:/Pension_Project/data/female_ICSLT2023.xlsx"
# Step 2: Load the mortality tables
male_data <- read_excel(male_file)
female_data <- read_excel(female_file)
# Display the first few rows of the male and female data to validate structure
print(head(male_data))
print(head(female_data))
# Step 3: Prepare the data
# Convert qx columns (excluding 'Age') into matrices
male_qx_matrix <- as.matrix(male_data[, -1])  # Exclude 'Age'
female_qx_matrix <- as.matrix(female_data[, -1])
# Step 4: Calculate lx (number of lives at each age and year)
# Initialize lx for both male and female tables with a starting population of 1 (or 100000 for large scale)
male_lx <- matrix(0, nrow = nrow(male_qx_matrix), ncol = ncol(male_qx_matrix))
female_lx <- matrix(0, nrow = nrow(female_qx_matrix), ncol = ncol(female_qx_matrix))
# Assume initial lives (l_0) for each year are 1
male_lx[1, ] <- 1
female_lx[1, ] <- 1
# Calculate lx iteratively for males
for (j in 1:ncol(male_qx_matrix)) { # Loop over columns (years)
for (i in 2:nrow(male_qx_matrix)) { # Loop over rows (ages)
male_lx[i, j] <- male_lx[i - 1, j] * (1 - male_qx_matrix[i - 1, j])
}
}
# Calculate lx iteratively for females
for (j in 1:ncol(female_qx_matrix)) {
for (i in 2:nrow(female_qx_matrix)) {
female_lx[i, j] <- female_lx[i - 1, j] * (1 - female_qx_matrix[i - 1, j])
}
}
# Step 5: Create actuarial tables
# Create male actuarial table
male_mortality_table <- new("actuarialtable",
x = male_data$Age,        # Ages
lx = male_lx[, 1],       # lx for the first year (2023)
interest = 0.05,         # Default interest rate
name = "Male Mortality Table")
# Assign qx to the male actuarial table
male_mortality_table@qx <- male_qx_matrix
# Install and load required packages
if (!requireNamespace("readxl", quietly = TRUE)) {
install.packages("readxl")
}
if (!requireNamespace("lifecontingencies", quietly = TRUE)) {
install.packages("lifecontingencies")
}
library(readxl)          # For reading Excel files
library(lifecontingencies) # For actuarial calculations
# Step 1: Define file paths
male_file <- "C:/Pension_Project/data/male_ICSLT2023.xlsx"
female_file <- "C:/Pension_Project/data/female_ICSLT2023.xlsx"
# Step 2: Load the mortality tables
male_data <- read_excel(male_file)
female_data <- read_excel(female_file)
# Display the first few rows of the male and female data to validate structure
print(head(male_data))
print(head(female_data))
# Step 3: Prepare the data
# Convert qx columns (excluding 'Age') into matrices
male_qx_matrix <- as.matrix(male_data[, -1])  # Exclude 'Age'
female_qx_matrix <- as.matrix(female_data[, -1])
# Step 4: Calculate lx (number of lives at each age and year)
# Initialize lx for both male and female tables with a starting population of 1 (or 100000 for large scale)
male_lx <- matrix(0, nrow = nrow(male_qx_matrix), ncol = ncol(male_qx_matrix))
female_lx <- matrix(0, nrow = nrow(female_qx_matrix), ncol = ncol(female_qx_matrix))
# Assume initial lives (l_0) for each year are 1
male_lx[1, ] <- 1
female_lx[1, ] <- 1
# Calculate lx iteratively for males
for (j in 1:ncol(male_qx_matrix)) { # Loop over columns (years)
for (i in 2:nrow(male_qx_matrix)) { # Loop over rows (ages)
male_lx[i, j] <- male_lx[i - 1, j] * (1 - male_qx_matrix[i - 1, j])
}
}
# Calculate lx iteratively for females
for (j in 1:ncol(female_qx_matrix)) {
for (i in 2:nrow(female_qx_matrix)) {
female_lx[i, j] <- female_lx[i - 1, j] * (1 - female_qx_matrix[i - 1, j])
}
}
# Step 5: Create actuarial tables
# Create male actuarial table
male_mortality_table <- new("actuarialtable",
x = male_data$Age,        # Ages
lx = male_lx[, 1],       # lx for the first year (2023)
interest = 0.05,         # Default interest rate
name = "Male Mortality Table")
# Assign qx to the male actuarial table
male_mortality_table@qx <- male_qx_matrix
# Correct Step 5: Create Male Actuarial Table
male_mortality_table <- new("actuarialtable",
x = male_data$Age,         # Ages
lx = male_lx[, 1],        # lx for the first year (2023)
interest = 0.05,          # Default interest rate
name = "Male Mortality Table")
# Correct Step 6: Create Female Actuarial Table
female_mortality_table <- new("actuarialtable",
x = female_data$Age,      # Ages
lx = female_lx[, 1],     # lx for the first year (2023)
interest = 0.05,         # Default interest rate
name = "Female Mortality Table")
# Validate the tables
print(summary(male_mortality_table))
print(summary(female_mortality_table))
# -----------------------------------------------------
# Example Calculations Using Actuarial Tables
# -----------------------------------------------------
# Example: Life expectancy at age 65 for males (2023)
male_life_expectancy_65 <- exn(male_mortality_table, x = 65)
print(paste("Male life expectancy at age 65 in 2023:", male_life_expectancy_65))
# Example: Life expectancy at age 65 for females (2023)
female_life_expectancy_65 <- exn(female_mortality_table, x = 65)
print(paste("Female life expectancy at age 65 in 2023:", female_life_expectancy_65))
# Example: Annuity at age 65 for males (2023)
male_annuity_65 <- axn(male_mortality_table, x = 65, i = 0.05)
print(paste("Male annuity at age 65 in 2023:", male_annuity_65))
# Example: Annuity at age 65 for females (2023)
female_annuity_65 <- axn(female_mortality_table, x = 65, i = 0.05)
print(paste("Female annuity at age 65 in 2023:", female_annuity_65))
# Dynamically set the root directory to the current .Rmd file location
library(here)
# Set root directory dynamically
root <- here::here()
knitr::opts_knit$set(root.dir = root)
# Load necessary libraries
library(yaml)
library(readxl)
library(dplyr)
library(knitr)
library(kableExtra)
# Load YAML configuration file
config <- yaml::read_yaml(file.path(root, "config/config.yaml"))
# Dynamically resolve paths from the configuration file
pension_report_path <- file.path(root, config$output_dir, config$pension_report_file)
adjusted_pensions_path <- file.path(root, config$output_dir, config$adjusted_pension_file)
# Debugging: Print paths to verify
cat("Pension Report Path:", pension_report_path, "\n")
cat("Adjusted Pensions Path:", adjusted_pensions_path, "\n")
# Check if files exist
if (!file.exists(pension_report_path)) {
stop("Error: Pension report file does not exist.")
}
if (!file.exists(adjusted_pensions_path)) {
stop("Error: Adjusted pensions file does not exist.")
}
# Load pension report and adjusted pensions data
pension_report <- read_excel(pension_report_path)
adjusted_pensions <- read_excel(adjusted_pensions_path)
# Display previews of the data
cat("Pension Report Preview:\n")
head(pension_report)
cat("Adjusted Pensions Preview:\n")
head(adjusted_pensions)
# Merge the datasets and select necessary columns
final_report_data <- pension_report %>%
left_join(adjusted_pensions, by = "retirement_age") %>%
select(
staff_name,
staff_dob,
retirement_age,
prospective_year,
final_salary_at_retirement,
final_salary_at_report_date,
avg_revalued_earnings_at_retirement,
avg_revalued_earnings_at_report_date,
pensionable_service,
scheme_pension_at_retirement,
scheme_pension_at_report_date,
adjusted_pension
)
cat("Merged Data Preview:\n")
head(final_report_data)
# Generate a formatted table for the report
final_report_table <- final_report_data %>%
kable(
format = "latex",
caption = "Pension Report with Adjustments",
longtable = TRUE
) %>%
kable_styling(latex_options = c("striped", "hold_position"))
final_report_table
tlmgr install longtable
install.packages("kableExtra")
install.packages("kableExtra")
install.packages(c("here", "yaml", "readxl", "dplyr", "knitr", "kableExtra", "officedown"))
install.packages(c("here", "yaml", "readxl", "dplyr", "knitr", "kableExtra", "officedown"))
print(colnames(pension_report))
print(head(pension_report))
shiny::runApp('C:/transferin/shiny_app')
runApp('C:/transferin/shiny_app')
getwd()
setwd("C:/transferin/shiny_app")
# ------------------------------------------------------------------------------
# Name: Master Pipeline Runner Script
# Description:
#   This script sequentially runs 12 individual R scripts that comprise the
#   calculation pipeline for the Transfer-In Credit Calculator.
#   It ensures that fresh data is processed each time the pipeline is run.
#   If any script encounters an error, the process stops and an error message is displayed.
#
# Usage:
#   Place this file in your "scripts" directory. When the user presses "Run Calculations"
#   in the Shiny app, this script will be sourced, executing all 12 scripts in order.
# ------------------------------------------------------------------------------
# List of scripts to run (adjust the names if necessary)
scripts_to_run <- c(
"1.loading.R",
"2salaryincreases.R",
"3salaryvector.R",
"4matrixrevearnings.R",
"5Arevaluationmatrix.R",
"6lastgoodeventually.R",
"reportaaaa.R",  # 🟢 Moved up to ensure the pension report is available
"Block1.R",
"Block2.R",
"Block3.R",
"Block4Enhanced.R",
"Block6PCFs.R",
"calculate_transfer_in_credit.R"  # 🟢 Runs last to use all final values
)
# Get the scripts directory (assumes getwd() returns the app's root directory)
scripts_dir <- file.path(getwd(), "scripts")
# Loop over each script and source it
for (script_name in scripts_to_run) {
script_path <- file.path(scripts_dir, script_name)
if (!file.exists(script_path)) {
stop("Script not found: ", script_path)
}
cat("Running: ", script_name, "\n")
tryCatch({
source(script_path, local = TRUE)
cat(script_name, "completed successfully.\n")
}, error = function(e) {
stop("Error running ", script_name, ": ", e$message)
})
}
cat("All 13 scripts executed successfully.\n")
shiny::runApp()
runApp()
